
ledblinking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000168  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000308  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000308  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000158  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e9  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000049  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000105c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f34  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004b5  00000000  00000000  0001159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003b0f  00000000  00000000  00011a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015560  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000070  00000000  00000000  000155b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080002e8 	.word	0x080002e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080002e8 	.word	0x080002e8

080001d8 <delay>:

#include <stdint.h>

void delay(void)
{
 80001d8:	b082      	sub	sp, #8
	for (volatile uint32_t i=0;i<300000;i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	9a01      	ldr	r2, [sp, #4]
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <delay+0x20>)
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d806      	bhi.n	80001f4 <delay+0x1c>
 80001e6:	461a      	mov	r2, r3
 80001e8:	9b01      	ldr	r3, [sp, #4]
 80001ea:	3301      	adds	r3, #1
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	9b01      	ldr	r3, [sp, #4]
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d9f9      	bls.n	80001e8 <delay+0x10>
}
 80001f4:	b002      	add	sp, #8
 80001f6:	4770      	bx	lr
 80001f8:	000493df 	.word	0x000493df

080001fc <main>:

int main(void)
{
 80001fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t *portcAHB1ENR =(uint32_t*)0x40023830;
	uint32_t *portcMODER=(uint32_t*)0x40020800;
	uint32_t *portcODR=(uint32_t*)0x40020814;
	//*portcAHB1ENR  |=0X04;
	*portcAHB1ENR  |=(1<<2);
 80001fe:	4a12      	ldr	r2, [pc, #72]	; (8000248 <main+0x4c>)
 8000200:	f8d2 3830 	ldr.w	r3, [r2, #2096]	; 0x830
 8000204:	f043 0304 	orr.w	r3, r3, #4
 8000208:	f8c2 3830 	str.w	r3, [r2, #2096]	; 0x830
	*portcMODER &= 0XFFFF0000;
	*portcMODER |= 0X00005555;
 800020c:	f5a2 5240 	sub.w	r2, r2, #12288	; 0x3000
	*portcMODER &= 0XFFFF0000;
 8000210:	f8b2 1802 	ldrh.w	r1, [r2, #2050]	; 0x802
	*portcMODER |= 0X00005555;
 8000214:	f245 5355 	movw	r3, #21845	; 0x5555
 8000218:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
while(1)
{
	*portcODR|=0x80;
 8000220:	4615      	mov	r5, r2
 8000222:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
	delay();
 800022e:	f7ff ffd3 	bl	80001d8 <delay>
 8000232:	2408      	movs	r4, #8
	for(uint32_t i =0; i<=7 ;i++)
	{
		*portcODR =(*portcODR>>1);
 8000234:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8000238:	085b      	lsrs	r3, r3, #1
 800023a:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
		delay();
 800023e:	f7ff ffcb 	bl	80001d8 <delay>
	for(uint32_t i =0; i<=7 ;i++)
 8000242:	3c01      	subs	r4, #1
 8000244:	d1f6      	bne.n	8000234 <main+0x38>
 8000246:	e7ec      	b.n	8000222 <main+0x26>
 8000248:	40023000 	.word	0x40023000

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000250:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000254:	480c      	ldr	r0, [pc, #48]	; (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000256:	490d      	ldr	r1, [pc, #52]	; (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000258:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <LoopForever+0xe>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800025c:	e002      	b.n	8000264 <LoopCopyDataInit>

0800025e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000262:	3304      	adds	r3, #4

08000264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000268:	d3f9      	bcc.n	800025e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000270:	e001      	b.n	8000276 <LoopFillZerobss>

08000272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000274:	3204      	adds	r2, #4

08000276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000278:	d3fb      	bcc.n	8000272 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ffbd 	bl	80001fc <main>

08000282 <LoopForever>:

LoopForever:
    b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	2000001c 	.word	0x2000001c

0800029c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	4d0d      	ldr	r5, [pc, #52]	; (80002d8 <__libc_init_array+0x38>)
 80002a4:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	2600      	movs	r6, #0
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	4d0b      	ldr	r5, [pc, #44]	; (80002e0 <__libc_init_array+0x40>)
 80002b2:	4c0c      	ldr	r4, [pc, #48]	; (80002e4 <__libc_init_array+0x44>)
 80002b4:	f000 f818 	bl	80002e8 <_init>
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	2600      	movs	r6, #0
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
